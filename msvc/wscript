from waflib import Logs
from waflib import Options


def configure(conf):
    conf.load("python")
    conf.check_python_version((3, 0, 0))

    Logs.info("Will use msbuild to compile")
    conf.find_program("msbuild", path_list=conf.env.PATH, var="MSBUILD")

    if conf.options.mode not in ("debug", "release", "release_msvc"):
        conf.fatal("--mode must be either debug, release or release_msvc.")

    conf.env.BUILD_CONFIGURATION = conf.options.mode
    if conf.env.DEST_CPU == "x86":
        conf.env.TARGET_PLATFORM = "Win32"
    elif conf.env.DEST_CPU == "amd64":
        conf.env.TARGET_PLATFORM = "x64"
    else:
        conf.fatal("Unsupported target CPU: " + conf.env.DEST_CPU)

    conf.msg("Target platform", conf.env.TARGET_PLATFORM)


def build(bld):
    Options.options.jobs = 1 # Don't run multiple jobs at the same time
    int_dir = bld.path.get_bld().make_node(r"tmp")
    final_output_dir = bld.path.get_bld().parent
    bld.env.INTDIR = int_dir.abspath()
    libs = [("SHARED", "DynamicLibrary", ".dll"),
            ("STATIC", "StaticLibrary", ".lib")]
    for var, type, ext in libs:
        if not bld.env[var]:
            continue

        output_name = bld.env.APPNAME + ext
        int_output_dir = int_dir.find_or_declare(var.lower())
        int_output = int_output_dir.find_or_declare(output_name)
        bld(
            rule=(
                "${MSBUILD} ${SRC[0].abspath()} "
                r"/t:Build "
                r"/p:TargetName=${APPNAME} "
                r"/p:IntDir=${INTDIR}\obj\ "
                r"/p:OutDir=" + int_output_dir.abspath() + r"\ "
                r"/p:Configuration=${BUILD_CONFIGURATION} "
                r"/p:Platform=${TARGET_PLATFORM} "
                r"/p:ConfigurationType=" + type
            ),
            source=bld.path.find_resource("flash3kyuu_deband.vcxproj"),
            target=int_output,
            always=True,
            update_outputs=True,
        )
        bld(
            rule="copy \"${SRC}\" \"${TGT}\"",
            source=int_output,
            target=final_output_dir.find_or_declare(output_name),
        )
